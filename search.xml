<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python操作MySQL数据库</title>
      <link href="/2019/05/13/python-cao-zuo-mysql-shu-ju-ku/"/>
      <url>/2019/05/13/python-cao-zuo-mysql-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前头"><a href="#一、写在前头" class="headerlink" title="一、写在前头"></a>一、写在前头</h3><blockquote><p>1.DoMysql类完成对MySQL数据库：fetch_one跟fetch_all操作<br>2.fetch_one：返回单个的元组（只取最上面的第一条结果），也就是一条记录(row)，如果没有结果 , 则返回 None<br>3.fetch_all：返回多个元组，即返回多条记录(rows),如果没有结果,则返回 ()<br>4.配置文件：将host，user，password，port记录在配置文件中，方便管理<br>5.如无例外，本博客都以Python3.X编写</p></blockquote><h3 id="二、安装并导入pymysql模块"><a href="#二、安装并导入pymysql模块" class="headerlink" title="二、安装并导入pymysql模块"></a>二、安装并导入pymysql模块</h3><p><code>pip install pymysql</code></p><blockquote><p>Python操作MySQL数据库有三种方法<br>1.pymysql: 本文使用该模块<br>2.mysqldb：只能适用于Python2.7<br>3.mysql.connector：</p></blockquote><h3 id="三、读取配置文件的数据"><a href="#三、读取配置文件的数据" class="headerlink" title="三、读取配置文件的数据"></a>三、读取配置文件的数据</h3><blockquote><p>读取config_file里的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import configparser</span><br><span class="line">from ALA_WeChat_1.common import contants# 见另一篇文章</span><br><span class="line"></span><br><span class="line">class ReadBaseConfig:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    完成读取任一配置文件的读取</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.config = configparser.ConfigParser()</span><br><span class="line">        self.config.read(contants.config_file)</span><br><span class="line"></span><br><span class="line">    def get(self, section, option):</span><br><span class="line">        return self.config.get(section, option)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conf = ReadBaseConfig()     # 读取配置文件实例化</span><br></pre></td></tr></table></figure><h3 id="四、代码如下"><a href="#四、代码如下" class="headerlink" title="四、代码如下"></a>四、代码如下</h3><blockquote><p>1.完成对MySQL数据库的数据操作<br>2.想要查询的SQL语句，也可以保存在excel中或者配置文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">from ALA_WeChat_1.common.config import conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DoMysql:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    完成对MySQL数据库的数据操作</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        host = conf.get(&apos;database&apos;, &apos;host&apos;)</span><br><span class="line">        user = conf.get(&apos;database&apos;, &apos;user&apos;)</span><br><span class="line">        password = conf.get(&apos;database&apos;, &apos;password&apos;)</span><br><span class="line">        port = int(conf.get(&apos;database&apos;, &apos;port&apos;))</span><br><span class="line">        # 创建连接</span><br><span class="line">        self.mysql = pymysql.connect(host=host, user=user, password=password, port=port, charset=&apos;utf8&apos;)</span><br><span class="line">        # 设置返回字典</span><br><span class="line">        self.cursor = self.mysql.cursor(pymysql.cursors.DictCursor)  # 创建游标</span><br><span class="line"></span><br><span class="line">    def fetch_one(self, sql):</span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        self.mysql.commit()</span><br><span class="line">        return self.cursor.fetchone()  # 返回一条数据（以元组形式）</span><br><span class="line"></span><br><span class="line">    def fetch_all(self, sql):</span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        return self.cursor.fetchall()  # 返回多条数据：元组里面嵌套元组</span><br><span class="line"></span><br><span class="line">    def close(self):</span><br><span class="line">        self.cursor.close()  # 关闭游标</span><br><span class="line">        self.mysql.close()  # 关闭连接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    mysql = DoMysql()</span><br><span class="line">    result1 = mysql.fetch_all(&quot;要查询的SQL语句&quot;)</span><br><span class="line">    print(&apos;result:&apos;, result1)</span><br><span class="line">    print(&apos;type(result1):&apos;, type(result1))</span><br><span class="line">    mysql.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python配置文件的使用</title>
      <link href="/2019/05/10/python-pei-zhi-wen-jian-de-shi-yong/"/>
      <url>/2019/05/10/python-pei-zhi-wen-jian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是配置文件？为什么要做配置文件？"><a href="#一、什么是配置文件？为什么要做配置文件？" class="headerlink" title="一、什么是配置文件？为什么要做配置文件？"></a>一、什么是配置文件？为什么要做配置文件？</h3><blockquote><p>将所有的代码和配置都变成模块化可配置化，这样就提高了代码的重用性，不再每次都去修改代码内部，这个就是我们逐步要做的事情，可配置化</p></blockquote><h3 id="二、python中的ConfigParser类"><a href="#二、python中的ConfigParser类" class="headerlink" title="二、python中的ConfigParser类"></a>二、python中的ConfigParser类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from configparser import ConfigParser</span><br></pre></td></tr></table></figure><blockquote><p>configparser是python自带的模块，用法如下：<br>1.创建ConfigParser对象。<br>2.调用read()函数打开配置文件<br>3.常用配置函数如下：</p></blockquote><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>sections()</td><td>得到所有的 section，并以列表的形式返回</td></tr><tr><td>options(section)</td><td>得到该 section 的所有 option (key值)</td></tr><tr><td>items(section)</td><td>得到该 section 的所有键值对</td></tr><tr><td>get(section, option)</td><td>得到 section 中 option 的值，返回为 string 类型，指定标签下面的 key 对应的 value 值</td></tr><tr><td>getint(section, option)</td><td>得到 section 中的 option 值，返回为 int 类型</td></tr><tr><td>add_section()</td><td>往配置文件中添加 section</td></tr><tr><td>set(section, name, value)</td><td>在 section 下设置 name=value</td></tr></tbody></table><h3 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h3><blockquote><p>1.新建config.py文件</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># _*_coding:utf-8_*_</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@Time     : 2019/5/10 13:59</span><br><span class="line">@Author   : Damon</span><br><span class="line">@Email    : kangming40@163.com</span><br><span class="line">@File     : config.py</span><br><span class="line">@Software : PyCharm</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import configparser</span><br><span class="line">from ALA_WeChat_1.common import contants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadConfig:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    完成配置文件的读取</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.config = configparser.ConfigParser()  # 初始化类</span><br><span class="line">        self.config.read(contants.global_file)  # 先加载global</span><br><span class="line">        switch = self.config.getboolean(&apos;switch&apos;, &apos;on&apos;)  # 通过判断switch的值，来确定使用哪个环境的配置</span><br><span class="line">        if switch:      # 开关打开的时候，使用test的配置</span><br><span class="line">            self.config.read(contants.test_file, encoding=&apos;utf-8&apos;)</span><br><span class="line">        else:       # 开关关闭的时候，使用issue的配置</span><br><span class="line">            self.config.read(contants.issue_file, encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">    def get(self, section, option):</span><br><span class="line">        return self.config.get(section, option)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = ReadConfig()       # 1.实例化供调用</span><br><span class="line"># if __name__ == &apos;__main__&apos;:        # 2.练习的时候</span><br><span class="line">#     config = ReadConfig()</span><br><span class="line">#     print(config.get(&apos;api&apos;, &apos;pre_url&apos;))</span><br></pre></td></tr></table></figure><blockquote><p>2.新建contants.py文件（我是将测试用例的相对路径，多个配置文件的相对路径写在这个py文件里，方便我管理）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># Author:Damon</span><br><span class="line"># Created time:2019/5/10 14:35</span><br><span class="line"># Filename:contants.py</span><br><span class="line">import os</span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))      # 当前项目的路径</span><br><span class="line">case_file = os.path.join(base_dir, &apos;data&apos;, &apos;cases.xlsx&apos;)        # 测试用例的路径</span><br><span class="line">global_file = os.path.join(base_dir, &apos;conf&apos;, &apos;global.conf&apos;)       # global配置文件</span><br><span class="line">online_file = os.path.join(base_dir, &apos;conf&apos;, &apos;online.conf&apos;)       # 阿里云环境配置文件</span><br><span class="line">test_file = os.path.join(base_dir, &apos;conf&apos;, &apos;test.conf&apos;)       # 测试环境配置文件</span><br><span class="line">issue_file = os.path.join(base_dir, &apos;conf&apos;, &apos;issue.conf&apos;)     # 预发布环境配置文件</span><br></pre></td></tr></table></figure><blockquote><p>3.conf配置文件书写格式：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[section]</span><br><span class="line">option = value</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoExcel类的封装</title>
      <link href="/2019/05/09/cao-zuo-excel-lei-de-feng-zhuang/"/>
      <url>/2019/05/09/cao-zuo-excel-lei-de-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<hr><p>do_excel类的封装：支持读取测试用例，及修改测试用例。</p><h3 id="代码如下所示："><a href="#代码如下所示：" class="headerlink" title="代码如下所示："></a>代码如下所示：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># Author:likangming</span><br><span class="line"># Created time:2019/5/9 16:41</span><br><span class="line"># Filename:do_excel.py</span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line">class Case:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例集，每一个测试用例，实际上就是它的一个实例</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):     # 每个类属性对应excel里的一个字段，以自己的为主</span><br><span class="line">        self.case_id = None</span><br><span class="line">        self.title = None</span><br><span class="line">        self.url = None</span><br><span class="line">        self.data = None</span><br><span class="line">        self.method = None</span><br><span class="line">        self.header = None</span><br><span class="line">        self.expected = None</span><br><span class="line">        self.actual = None</span><br><span class="line">        self.result = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DoExcel:</span><br><span class="line"></span><br><span class="line">    def __init__(self, file_name, sheet_name):</span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.sheet_name = sheet_name</span><br><span class="line">        self.workbook = openpyxl.load_workbook(file_name)       # 读取excel文件</span><br><span class="line">        self.sheet = self.workbook[sheet_name]      # 指定对应的sheet</span><br><span class="line"></span><br><span class="line">    def getcase(self):      # 根据测试用例集的类属性获取excel的对应数据</span><br><span class="line">        max_row = self.sheet.max_row    # 获取最大行数</span><br><span class="line">        cases = []</span><br><span class="line">        for i in range(2, max_row + 1):  # 从第二行开始读取数据</span><br><span class="line">            case = Case()   # 实例</span><br><span class="line">            case.case_id = self.sheet.cell(row=i, column=1).value</span><br><span class="line">            case.title = self.sheet.cell(row=i, column=2).value</span><br><span class="line">            case.url = self.sheet.cell(row=i, column=3).value</span><br><span class="line">            case.data = self.sheet.cell(row=i, column=4).value</span><br><span class="line">            case.method = self.sheet.cell(row=i, column=5).value</span><br><span class="line">            case.expected = self.sheet.cell(row=i, column=6).value</span><br><span class="line">            cases.append(case)</span><br><span class="line">        self.workbook.close()       # 关闭workbook</span><br><span class="line">        return cases    # 返回case列表</span><br><span class="line"></span><br><span class="line">    def writer_result(self, row, actual, result):       # 写入数据到excel中</span><br><span class="line">        sheet = self.workbook[self.sheet_name]</span><br><span class="line">        sheet.cell(row, 7).value = actual</span><br><span class="line">        sheet.cell(row, 8).value = result</span><br><span class="line">        self.workbook.save(filename=self.file_name)     # 保存</span><br><span class="line">        self.workbook.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试中cookies的复用</title>
      <link href="/2019/03/01/jie-kou-ce-shi-zhong-cookies-de-fu-yong/"/>
      <url>/2019/03/01/jie-kou-ce-shi-zhong-cookies-de-fu-yong/</url>
      
        <content type="html"><![CDATA[<hr><p>在对接口做测试的时候，一个接口请求参数后所产生的cookies，很多时候会作为下一个接口的数据依赖。本篇则从完成接口文档中注册，登录，充值的调用，其中充值接口支持传cookies参数。</p><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>Python version：3.7<br>Ida：Pycharm</p><h3 id="方法一：在一个接口请求中输入上一个接口的cookies信息"><a href="#方法一：在一个接口请求中输入上一个接口的cookies信息" class="headerlink" title="方法一：在一个接口请求中输入上一个接口的cookies信息"></a>方法一：在一个接口请求中输入上一个接口的cookies信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class HttpRequest:</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    使用这类的request方法去完成不同的http请求，并且返回相应结果</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def http_request(self, method, url, data, json=None, cookies=None):</span><br><span class="line">        method = method.upper()  <span class="comment"># 将method强制转成大写</span></span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">'GET'</span>:</span><br><span class="line">            resp = requests.get(url, params=data, cookies=cookies)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">'POST'</span>:</span><br><span class="line">            <span class="keyword">if</span> json:</span><br><span class="line">                resp = requests.post(url, json=data, cookies=cookies)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resp = requests.post(url, data=data, cookies=cookies)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resp = None</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Un-support method'</span>)</span><br><span class="line">        <span class="built_in">return</span> resp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 操作代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    params = &#123;<span class="string">'mobilephone'</span>: <span class="string">'XXX'</span>, <span class="string">'pwd'</span>: <span class="string">'XXX'</span>&#125;</span><br><span class="line">    url_register = <span class="string">'http://xxx.xxx'</span></span><br><span class="line">    url_login = <span class="string">'http://xxx.xxx'</span></span><br><span class="line">    url_recharge = <span class="string">'http://xxx.xxx'</span></span><br><span class="line">    httprequest = HttpRequest()<span class="comment"># 实例化</span></span><br><span class="line">    <span class="comment"># 调用登录接口</span></span><br><span class="line">    resp = httprequest.http_request(<span class="string">'post'</span>, url_login, data=params)</span><br><span class="line">    <span class="comment"># 调用充值接口</span></span><br><span class="line">    params = &#123;<span class="string">'mobilephone'</span>: <span class="string">'XXX'</span>, <span class="string">'amount'</span>: <span class="string">'1500'</span>&#125;</span><br><span class="line">    resp = httprequest.http_request(<span class="string">'post'</span>, url_recharge, data=params, cookies=resp.cookies)</span><br></pre></td></tr></table></figure><h3 id="方法二：直接调用requests的sessions"><a href="#方法二：直接调用requests的sessions" class="headerlink" title="方法二：直接调用requests的sessions"></a>方法二：直接调用requests的sessions</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class HttpRequest2:</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    使用这类的request方法去完成不同的http请求，并且返回相应结果</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="comment"># 打开一个session</span></span><br><span class="line">        self.session = requests.sessions.session()</span><br><span class="line"></span><br><span class="line">    def http_request(self, method, url, data):</span><br><span class="line">        method = method.upper()</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">'GET'</span>:</span><br><span class="line">            resp = self.session.request(method=method, url=url, params=data)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">'POST'</span>:</span><br><span class="line">            <span class="keyword">if</span> json:</span><br><span class="line">                resp = self.session.request(method=method, url=url, json=json)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resp = self.session.request(method=method, url=url, data=data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resp = None</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'Un-support method'</span>)</span><br><span class="line">        <span class="built_in">return</span> resp</span><br><span class="line"></span><br><span class="line">def session_close(self):</span><br><span class="line">        self.session.close()    <span class="comment"># 每执行一次session，都要将它关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 操作代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    params = &#123;<span class="string">'mobilephone'</span>: <span class="string">'156XXX'</span>, <span class="string">'pwd'</span>: <span class="string">'XXX'</span>&#125;</span><br><span class="line">    url_register = <span class="string">'http://xxx.xxx'</span></span><br><span class="line">    url_login = <span class="string">'http://xxx.xxx'</span></span><br><span class="line">    url_recharge = <span class="string">'http://xxx.xxx'</span></span><br><span class="line">    httprequest = HttpRequest2()</span><br><span class="line">    <span class="comment"># 调用登录接口</span></span><br><span class="line">    resp = httprequest.http_request(<span class="string">'post'</span>, url_login, data=params)</span><br><span class="line">    <span class="built_in">print</span>(resp.text)</span><br><span class="line">    <span class="comment"># 调用充值接口</span></span><br><span class="line">    params = &#123;<span class="string">'mobilephone'</span>: <span class="string">'156XXX'</span>, <span class="string">'amount'</span>: <span class="string">'1500'</span>&#125;</span><br><span class="line">    resp = httprequest.http_request(<span class="string">'post'</span>, url_recharge, data=params)</span><br><span class="line">    <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h4 id="总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。"><a href="#总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。" class="headerlink" title="总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。"></a>总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/10/hello-world/"/>
      <url>/2019/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
