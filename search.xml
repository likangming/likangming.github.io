<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/25/hello-world/"/>
      <url>/2019/03/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>接口测试中cookies的复用</title>
      <link href="/2019/03/01/jie-kou-ce-shi-zhong-cookies-de-fu-yong/"/>
      <url>/2019/03/01/jie-kou-ce-shi-zhong-cookies-de-fu-yong/</url>
      
        <content type="html"><![CDATA[<hr><p>在对接口做测试的时候，一个接口请求参数后所产生的cookies，很多时候会作为下一个接口的数据依赖。本篇则从完成接口文档中注册，登录，充值的调用，其中充值接口支持传cookies参数。</p><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>Python version：3.7<br>Ida：Pycharm</p><h3 id="方法一：在一个接口请求中输入上一个接口的cookies信息"><a href="#方法一：在一个接口请求中输入上一个接口的cookies信息" class="headerlink" title="方法一：在一个接口请求中输入上一个接口的cookies信息"></a>方法一：在一个接口请求中输入上一个接口的cookies信息</h3><pre class=" language-bash"><code class="language-bash">class HttpRequest:    <span class="token string">""</span><span class="token string">"    使用这类的request方法去完成不同的http请求，并且返回相应结果    "</span><span class="token string">""</span>    def http_request<span class="token punctuation">(</span>self, method, url, data, json<span class="token operator">=</span>None, cookies<span class="token operator">=</span>None<span class="token punctuation">)</span>:        method <span class="token operator">=</span> method.upper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将method强制转成大写</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token keyword">:</span>            resp <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url, params<span class="token operator">=</span>data, cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token keyword">:</span>            <span class="token keyword">if</span> json:                resp <span class="token operator">=</span> requests.post<span class="token punctuation">(</span>url, json<span class="token operator">=</span>data, cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>            else:                resp <span class="token operator">=</span> requests.post<span class="token punctuation">(</span>url, data<span class="token operator">=</span>data, cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        else:            resp <span class="token operator">=</span> None            print<span class="token punctuation">(</span><span class="token string">'Un-support method'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resp</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 操作代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token keyword">:</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token keyword">:</span> <span class="token string">'XXX'</span>, <span class="token string">'pwd'</span><span class="token keyword">:</span> <span class="token string">'XXX'</span><span class="token punctuation">}</span>    url_register <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_login <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_recharge <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    httprequest <span class="token operator">=</span> HttpRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 实例化</span>    <span class="token comment" spellcheck="true"># 调用登录接口</span>    resp <span class="token operator">=</span> httprequest.http_request<span class="token punctuation">(</span><span class="token string">'post'</span>, url_login, data<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用充值接口</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token keyword">:</span> <span class="token string">'XXX'</span>, <span class="token string">'amount'</span><span class="token keyword">:</span> <span class="token string">'1500'</span><span class="token punctuation">}</span>    resp <span class="token operator">=</span> httprequest.http_request<span class="token punctuation">(</span><span class="token string">'post'</span>, url_recharge, data<span class="token operator">=</span>params, cookies<span class="token operator">=</span>resp.cookies<span class="token punctuation">)</span></code></pre><h3 id="方法二：直接调用requests的sessions"><a href="#方法二：直接调用requests的sessions" class="headerlink" title="方法二：直接调用requests的sessions"></a>方法二：直接调用requests的sessions</h3><pre class=" language-bash"><code class="language-bash">class HttpRequest2:    <span class="token string">""</span><span class="token string">"    使用这类的request方法去完成不同的http请求，并且返回相应结果    "</span><span class="token string">""</span>    def __init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:        <span class="token comment" spellcheck="true"># 打开一个session</span>        self.session <span class="token operator">=</span> requests.sessions.session<span class="token punctuation">(</span><span class="token punctuation">)</span>    def http_request<span class="token punctuation">(</span>self, method, url, data<span class="token punctuation">)</span>:        method <span class="token operator">=</span> method.upper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token keyword">:</span>            resp <span class="token operator">=</span> self.session.request<span class="token punctuation">(</span>method<span class="token operator">=</span>method, url<span class="token operator">=</span>url, params<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token keyword">:</span>            <span class="token keyword">if</span> json:                resp <span class="token operator">=</span> self.session.request<span class="token punctuation">(</span>method<span class="token operator">=</span>method, url<span class="token operator">=</span>url, json<span class="token operator">=</span>json<span class="token punctuation">)</span>            else:                resp <span class="token operator">=</span> self.session.request<span class="token punctuation">(</span>method<span class="token operator">=</span>method, url<span class="token operator">=</span>url, data<span class="token operator">=</span>data<span class="token punctuation">)</span>        else:            resp <span class="token operator">=</span> None            print<span class="token punctuation">(</span><span class="token string">'Un-support method'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resp    def session_close<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:        self.session.close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每执行一次session，都要将它关闭</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 操作代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token keyword">:</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token keyword">:</span> <span class="token string">'156XXX'</span>, <span class="token string">'pwd'</span><span class="token keyword">:</span> <span class="token string">'XXX'</span><span class="token punctuation">}</span>    url_register <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_login <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_recharge <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    httprequest <span class="token operator">=</span> HttpRequest2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用登录接口</span>    resp <span class="token operator">=</span> httprequest.http_request<span class="token punctuation">(</span><span class="token string">'post'</span>, url_login, data<span class="token operator">=</span>params<span class="token punctuation">)</span>    print<span class="token punctuation">(</span>resp.text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用充值接口</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token keyword">:</span> <span class="token string">'156XXX'</span>, <span class="token string">'amount'</span><span class="token keyword">:</span> <span class="token string">'1500'</span><span class="token punctuation">}</span>    resp <span class="token operator">=</span> httprequest.http_request<span class="token punctuation">(</span><span class="token string">'post'</span>, url_recharge, data<span class="token operator">=</span>params<span class="token punctuation">)</span>    print<span class="token punctuation">(</span>resp.text<span class="token punctuation">)</span></code></pre><h4 id="总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。"><a href="#总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。" class="headerlink" title="总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。"></a>总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。</h4>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
