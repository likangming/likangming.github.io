<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python操作MySQL数据库</title>
      <link href="/2019/05/13/python-cao-zuo-mysql-shu-ju-ku/"/>
      <url>/2019/05/13/python-cao-zuo-mysql-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="一、写在前头"><a href="#一、写在前头" class="headerlink" title="一、写在前头"></a>一、写在前头</h3><blockquote><p>1.DoMysql类完成对MySQL数据库：fetch_one跟fetch_all操作<br>2.fetch_one：返回单个的元组（只取最上面的第一条结果），也就是一条记录(row)，如果没有结果 , 则返回 None<br>3.fetch_all：返回多个元组，即返回多条记录(rows),如果没有结果,则返回 ()<br>4.配置文件：将host，user，password，port记录在配置文件中，方便管理<br>5.如无例外，本博客都以Python3.X编写</p></blockquote><h3 id="二、安装并导入pymysql模块"><a href="#二、安装并导入pymysql模块" class="headerlink" title="二、安装并导入pymysql模块"></a>二、安装并导入pymysql模块</h3><p><code>pip install pymysql</code></p><blockquote><p>Python操作MySQL数据库有三种方法<br>1.pymysql: 本文使用该模块<br>2.mysqldb：只能适用于Python2.7<br>3.mysql.connector：</p></blockquote><h3 id="三、读取配置文件的数据"><a href="#三、读取配置文件的数据" class="headerlink" title="三、读取配置文件的数据"></a>三、读取配置文件的数据</h3><blockquote><p>读取config_file里的内容</p></blockquote><pre><code>import configparserfrom ALA_WeChat_1.common import contants    # 见另一篇文章class ReadBaseConfig:    &quot;&quot;&quot;    完成读取任一配置文件的读取    &quot;&quot;&quot;    def __init__(self):        self.config = configparser.ConfigParser()        self.config.read(contants.config_file)    def get(self, section, option):        return self.config.get(section, option)conf = ReadBaseConfig()     # 读取配置文件实例化</code></pre><h3 id="四、代码如下"><a href="#四、代码如下" class="headerlink" title="四、代码如下"></a>四、代码如下</h3><blockquote><p>1.完成对MySQL数据库的数据操作<br>2.想要查询的SQL语句，也可以保存在excel中或者配置文件中</p></blockquote><pre><code>import pymysqlfrom ALA_WeChat_1.common.config import confclass DoMysql:    &quot;&quot;&quot;    完成对MySQL数据库的数据操作    &quot;&quot;&quot;    def __init__(self):        host = conf.get(&#39;database&#39;, &#39;host&#39;)        user = conf.get(&#39;database&#39;, &#39;user&#39;)        password = conf.get(&#39;database&#39;, &#39;password&#39;)        port = int(conf.get(&#39;database&#39;, &#39;port&#39;))        # 创建连接        self.mysql = pymysql.connect(host=host, user=user, password=password, port=port, charset=&#39;utf8&#39;)        # 设置返回字典        self.cursor = self.mysql.cursor(pymysql.cursors.DictCursor)  # 创建游标    def fetch_one(self, sql):        self.cursor.execute(sql)        self.mysql.commit()        return self.cursor.fetchone()  # 返回一条数据（以元组形式）    def fetch_all(self, sql):        self.cursor.execute(sql)        return self.cursor.fetchall()  # 返回多条数据：元组里面嵌套元组    def close(self):        self.cursor.close()  # 关闭游标        self.mysql.close()  # 关闭连接if __name__ == &#39;__main__&#39;:    mysql = DoMysql()    result1 = mysql.fetch_all(&quot;要查询的SQL语句&quot;)    print(&#39;result:&#39;, result1)    print(&#39;type(result1):&#39;, type(result1))    mysql.close()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python配置文件的使用</title>
      <link href="/2019/05/10/python-pei-zhi-wen-jian-de-shi-yong/"/>
      <url>/2019/05/10/python-pei-zhi-wen-jian-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是配置文件？为什么要做配置文件？"><a href="#一、什么是配置文件？为什么要做配置文件？" class="headerlink" title="一、什么是配置文件？为什么要做配置文件？"></a>一、什么是配置文件？为什么要做配置文件？</h3><blockquote><p>将所有的代码和配置都变成模块化可配置化，这样就提高了代码的重用性，不再每次都去修改代码内部，这个就是我们逐步要做的事情，可配置化</p></blockquote><h3 id="二、python中的ConfigParser类"><a href="#二、python中的ConfigParser类" class="headerlink" title="二、python中的ConfigParser类"></a>二、python中的ConfigParser类</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParser</code></pre><blockquote><p>configparser是python自带的模块，用法如下：<br>1.创建ConfigParser对象。<br>2.调用read()函数打开配置文件<br>3.常用配置函数如下：</p></blockquote><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>sections()</td><td>得到所有的 section，并以列表的形式返回</td></tr><tr><td>options(section)</td><td>得到该 section 的所有 option (key值)</td></tr><tr><td>items(section)</td><td>得到该 section 的所有键值对</td></tr><tr><td>get(section, option)</td><td>得到 section 中 option 的值，返回为 string 类型，指定标签下面的 key 对应的 value 值</td></tr><tr><td>getint(section, option)</td><td>得到 section 中的 option 值，返回为 int 类型</td></tr><tr><td>add_section()</td><td>往配置文件中添加 section</td></tr><tr><td>set(section, name, value)</td><td>在 section 下设置 name=value</td></tr></tbody></table><h3 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h3><blockquote><p>1.新建config.py文件</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># _*_coding:utf-8_*_</span><span class="token triple-quoted-string string">"""@Time     : 2019/5/10 13:59@Author   : Damon@Email    : kangming40@163.com@File     : config.py@Software : PyCharm"""</span><span class="token keyword">import</span> configparser<span class="token keyword">from</span> ALA_WeChat_1<span class="token punctuation">.</span>common <span class="token keyword">import</span> contants<span class="token keyword">class</span> <span class="token class-name">ReadConfig</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    完成配置文件的读取    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>config <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化类</span>        self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span>contants<span class="token punctuation">.</span>global_file<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 先加载global</span>        switch <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>getboolean<span class="token punctuation">(</span><span class="token string">'switch'</span><span class="token punctuation">,</span> <span class="token string">'on'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 通过判断switch的值，来确定使用哪个环境的配置</span>        <span class="token keyword">if</span> switch<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 开关打开的时候，使用test的配置</span>            self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span>contants<span class="token punctuation">.</span>test_file<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 开关关闭的时候，使用issue的配置</span>            self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>read<span class="token punctuation">(</span>contants<span class="token punctuation">.</span>issue_file<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> section<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span>section<span class="token punctuation">,</span> option<span class="token punctuation">)</span>config <span class="token operator">=</span> ReadConfig<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 1.实例化供调用</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':        # 2.练习的时候</span><span class="token comment" spellcheck="true">#     config = ReadConfig()</span><span class="token comment" spellcheck="true">#     print(config.get('api', 'pre_url'))</span></code></pre><blockquote><p>2.新建contants.py文件（我是将测试用例的相对路径，多个配置文件的相对路径写在这个py文件里，方便我管理）</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Author:Damon</span><span class="token comment" spellcheck="true"># Created time:2019/5/10 14:35</span><span class="token comment" spellcheck="true"># Filename:contants.py</span><span class="token keyword">import</span> osbase_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 当前项目的路径</span>case_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'cases.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 测试用例的路径</span>global_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'conf'</span><span class="token punctuation">,</span> <span class="token string">'global.conf'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># global配置文件</span>online_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'conf'</span><span class="token punctuation">,</span> <span class="token string">'online.conf'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 阿里云环境配置文件</span>test_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'conf'</span><span class="token punctuation">,</span> <span class="token string">'test.conf'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 测试环境配置文件</span>issue_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'conf'</span><span class="token punctuation">,</span> <span class="token string">'issue.conf'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 预发布环境配置文件</span></code></pre><blockquote><p>3.conf配置文件书写格式：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>section<span class="token punctuation">]</span>option <span class="token operator">=</span> value</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoExcel类的封装</title>
      <link href="/2019/05/09/cao-zuo-excel-lei-de-feng-zhuang/"/>
      <url>/2019/05/09/cao-zuo-excel-lei-de-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<hr><p>do_excel类的封装：支持读取测试用例，及修改测试用例。</p><h3 id="代码如下所示："><a href="#代码如下所示：" class="headerlink" title="代码如下所示："></a>代码如下所示：</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Author:likangming</span><span class="token comment" spellcheck="true"># Created time:2019/5/9 16:41</span><span class="token comment" spellcheck="true"># Filename:do_excel.py</span><span class="token keyword">import</span> openpyxl<span class="token keyword">class</span> <span class="token class-name">Case</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    测试用例集，每一个测试用例，实际上就是它的一个实例    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 每个类属性对应excel里的一个字段，以自己的为主</span>        self<span class="token punctuation">.</span>case_id <span class="token operator">=</span> None        self<span class="token punctuation">.</span>title <span class="token operator">=</span> None        self<span class="token punctuation">.</span>url <span class="token operator">=</span> None        self<span class="token punctuation">.</span>data <span class="token operator">=</span> None        self<span class="token punctuation">.</span>method <span class="token operator">=</span> None        self<span class="token punctuation">.</span>header <span class="token operator">=</span> None        self<span class="token punctuation">.</span>expected <span class="token operator">=</span> None        self<span class="token punctuation">.</span>actual <span class="token operator">=</span> None        self<span class="token punctuation">.</span>result <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">DoExcel</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> sheet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>file_name <span class="token operator">=</span> file_name        self<span class="token punctuation">.</span>sheet_name <span class="token operator">=</span> sheet_name        self<span class="token punctuation">.</span>workbook <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 读取excel文件</span>        self<span class="token punctuation">.</span>sheet <span class="token operator">=</span> self<span class="token punctuation">.</span>workbook<span class="token punctuation">[</span>sheet_name<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># 指定对应的sheet</span>    <span class="token keyword">def</span> <span class="token function">getcase</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 根据测试用例集的类属性获取excel的对应数据</span>        max_row <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>max_row    <span class="token comment" spellcheck="true"># 获取最大行数</span>        cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> max_row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 从第二行开始读取数据</span>            case <span class="token operator">=</span> Case<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例</span>            case<span class="token punctuation">.</span>case_id <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            case<span class="token punctuation">.</span>title <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            case<span class="token punctuation">.</span>url <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            case<span class="token punctuation">.</span>data <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            case<span class="token punctuation">.</span>method <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            case<span class="token punctuation">.</span>expected <span class="token operator">=</span> self<span class="token punctuation">.</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>i<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value            cases<span class="token punctuation">.</span>append<span class="token punctuation">(</span>case<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>workbook<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 关闭workbook</span>        <span class="token keyword">return</span> cases    <span class="token comment" spellcheck="true"># 返回case列表</span>    <span class="token keyword">def</span> <span class="token function">writer_result</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> row<span class="token punctuation">,</span> actual<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 写入数据到excel中</span>        sheet <span class="token operator">=</span> self<span class="token punctuation">.</span>workbook<span class="token punctuation">[</span>self<span class="token punctuation">.</span>sheet_name<span class="token punctuation">]</span>        sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> actual        sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> result        self<span class="token punctuation">.</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filename<span class="token operator">=</span>self<span class="token punctuation">.</span>file_name<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 保存</span>        self<span class="token punctuation">.</span>workbook<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试中cookies的复用</title>
      <link href="/2019/03/01/jie-kou-ce-shi-zhong-cookies-de-fu-yong/"/>
      <url>/2019/03/01/jie-kou-ce-shi-zhong-cookies-de-fu-yong/</url>
      
        <content type="html"><![CDATA[<hr><p>在对接口做测试的时候，一个接口请求参数后所产生的cookies，很多时候会作为下一个接口的数据依赖。本篇则从完成接口文档中注册，登录，充值的调用，其中充值接口支持传cookies参数。</p><h3 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h3><p>Python version：3.7<br>Ida：Pycharm</p><h3 id="方法一：在一个接口请求中输入上一个接口的cookies信息"><a href="#方法一：在一个接口请求中输入上一个接口的cookies信息" class="headerlink" title="方法一：在一个接口请求中输入上一个接口的cookies信息"></a>方法一：在一个接口请求中输入上一个接口的cookies信息</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    使用这类的request方法去完成不同的http请求，并且返回相应结果    """</span>    <span class="token keyword">def</span> <span class="token function">http_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> json<span class="token operator">=</span>None<span class="token punctuation">,</span> cookies<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        method <span class="token operator">=</span> method<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将method强制转成大写</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> json<span class="token punctuation">:</span>                resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> None            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Un-support method'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resp</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 操作代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">,</span> <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">}</span>    url_register <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_login <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_recharge <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    httprequest <span class="token operator">=</span> HttpRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 实例化</span>    <span class="token comment" spellcheck="true"># 调用登录接口</span>    resp <span class="token operator">=</span> httprequest<span class="token punctuation">.</span>http_request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url_login<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用充值接口</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'1500'</span><span class="token punctuation">}</span>    resp <span class="token operator">=</span> httprequest<span class="token punctuation">.</span>http_request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url_recharge<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> cookies<span class="token operator">=</span>resp<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span></code></pre><h3 id="方法二：直接调用requests的sessions"><a href="#方法二：直接调用requests的sessions" class="headerlink" title="方法二：直接调用requests的sessions"></a>方法二：直接调用requests的sessions</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HttpRequest2</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    使用这类的request方法去完成不同的http请求，并且返回相应结果    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打开一个session</span>        self<span class="token punctuation">.</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>sessions<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">http_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        method <span class="token operator">=</span> method<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span>method<span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> json<span class="token punctuation">:</span>                resp <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span>method<span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>json<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                resp <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span>method<span class="token punctuation">,</span> url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> None            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Un-support method'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resp    <span class="token keyword">def</span> <span class="token function">session_close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每执行一次session，都要将它关闭</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 操作代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token punctuation">:</span> <span class="token string">'156XXX'</span><span class="token punctuation">,</span> <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">'XXX'</span><span class="token punctuation">}</span>    url_register <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_login <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    url_recharge <span class="token operator">=</span> <span class="token string">'http://xxx.xxx'</span>    httprequest <span class="token operator">=</span> HttpRequest2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用登录接口</span>    resp <span class="token operator">=</span> httprequest<span class="token punctuation">.</span>http_request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url_login<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用充值接口</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mobilephone'</span><span class="token punctuation">:</span> <span class="token string">'156XXX'</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'1500'</span><span class="token punctuation">}</span>    resp <span class="token operator">=</span> httprequest<span class="token punctuation">.</span>http_request<span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url_recharge<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。"><a href="#总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。" class="headerlink" title="总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。"></a>总结：方法一是调用充值接口时，输入登录的cookies信息，方法二是调用Session对象，Session每执行一个对象，cookies信息都有保留在当前Session，所以可以调用。明白其中的原理，用哪种方式都可以。</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/10/hello-world/"/>
      <url>/2019/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
